#!/usr/bin/env
"""
A script to convert a SMILES string into a pre-optimised Gaussian input file using RDKit.
This file pre-optimises the structure using UFF and generates a Gaussian input (.gjf) file.

Example usage: python3 smiles2gjf.py -s "C1=CC=CC=C1" -o benzene.gjf
"""

import argparse
import os
import sys

from rdkit import Chem
from rdkit.Chem import AllChem

# Dictionary of custom headers. Once my workflow is more clear, I can write a few options here.
CUSTOM_HEADERS = {
    "default": (
        "%NProcShared=4\n"
        "%Mem=4GB\n"
        "#P B3LYP/6-31G(d) Opt Freq\n\n"
        "Generated by RDKit\n\n"
        "0 1\n"
    ),
    "advanced": (
        "%NProcShared=4\n"
        "%Mem=8GB\n"
        "#P B3LYP/6-311+G(d,p) Opt Freq\n\n"
        "Advanced B3LYP calculation\n\n"
        "0 1\n"
    ),
    "pbe0": (
        "%NProcShared=4\n"
        "%Mem=4GB\n"
        "#P PBE0/6-31G(d) Opt Freq\n\n"
        "PBE0 calculation\n\n"
        "0 1\n"
    ),
}


def generate_chk_filename(output_filename):
    """Automatically generate a checkpoint filename from the output filename."""
    base = os.path.splitext(output_filename)[0]
    return base + ".chk"


def smiles_to_gjf(smiles, filename="output.gjf", header="default"):
    # Select the header from the custom headers dictionary.
    header_str = CUSTOM_HEADERS.get(header, CUSTOM_HEADERS["default"])

    # Generate automatic checkpoint filename and prepend the checkpoint line if not already present.
    chk_file = generate_chk_filename(filename)
    if "%chk" not in header_str:
        header_str = f"%chk={chk_file}\n" + header_str

    mol = Chem.MolFromSmiles(smiles)
    if mol is None:
        raise ValueError("Invalid SMILES string provided.")

    mol = Chem.AddHs(mol)
    result = AllChem.EmbedMolecule(mol)
    if result != 0:
        raise RuntimeError("Embedding molecule failed. Please check the SMILES string.")

    result = AllChem.UFFOptimizeMolecule(mol)
    if result != 0:
        print("Warning: UFF optimization did not fully converge.")

    with open(filename, "w") as f:
        f.write(header_str)
        conf = mol.GetConformer()
        for atom in mol.GetAtoms():
            pos = conf.GetAtomPosition(atom.GetIdx())
            f.write(
                "{:2} {:12.6f} {:12.6f} {:12.6f}\n".format(
                    atom.GetSymbol(), pos.x, pos.y, pos.z
                )
            )
        f.write("\n")

    print("Gaussian input file generated and saved as:", filename)


def main():
    parser = argparse.ArgumentParser(
        description="Convert a SMILES string to a pre-optimised Gaussian input file using RDKit."
    )
    parser.add_argument(
        "-s",
        "--smiles",
        type=str,
        help="SMILES string to convert (enclose in quotes).",
        required=True,
    )
    parser.add_argument(
        "-o",
        "--output",
        type=str,
        default="output.gjf",
        help="Output Gaussian input file name (default: output.gjf)",
    )
    parser.add_argument(
        "-H",
        "--header",
        type=str,
        default="default",
        help="Pre-defined header to use (options: default, advanced, pbe0)",
    )
    args = parser.parse_args()

    try:
        smiles_to_gjf(args.smiles, args.output, args.header)
    except Exception as e:
        print("Error:", e)
        sys.exit(1)


if __name__ == "__main__":
    main()
